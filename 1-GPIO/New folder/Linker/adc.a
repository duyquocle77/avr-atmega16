;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 22/05/2022
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x40
;#define LED  PORTD.0
;#define LED7 PORTC
;#define EN1  PORTB.0
;#define EN2  PORTB.1
;#define EN3  PORTB.2
;#define EN4  PORTB.3
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0029 // Delay needed for the stabilization of the ADC input voltage
; 0000 002A delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 002B // Start the AD conversion
; 0000 002C ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002D // Wait for the AD conversion to complete
; 0000 002E while ((ADCSRA & 0x10)==1);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002F ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0030 return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0031 }
;PCODE: $00000021 VOL: 0
;
;// Declare your global variables here
;
;const unsigned char num[17] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E, 0xBF};

	.DSEG
;
;void hienthiled7(unsigned int x)
; 0000 0038 {

	.CSEG
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0039 unsigned int temp, a, b, c, d;
; 0000 003A temp = x;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;	x -> Y+10
;	temp -> R16,R17
;	a -> R18,R19
;	b -> R20,R21
;	c -> Y+8
;	d -> Y+6
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003B d = temp % 10;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003C temp = temp / 10;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003D c = temp % 10;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003E temp = temp / 10;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003F b = temp % 10;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0040 a = temp / 10;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0041 
; 0000 0042 EN1 = 0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0043 LED7 = num[a];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0044 delay_ms(1);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0045 EN1 = 1;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0046 
; 0000 0047 EN2 = 0;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0048 LED7 = num[b];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0049 delay_ms(1);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004A EN2 = 1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004B 
; 0000 004C EN3 = 0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004D LED7 = num[c];
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 004E delay_ms(1);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004F EN3 = 1;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0050 
; 0000 0051 EN4 = 0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0052 LED7 = num[d];
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0053 delay_ms(1);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0054 EN4 = 1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0055 }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;void main(void)
; 0000 0058 {
;PCODE: $00000070 VOL: 0
; 0000 0059 
; 0000 005A DDRB = 0xFF;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 005B PORTB = 0xFF;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005C 
; 0000 005D DDRC = 0xFF;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 005E PORTC = 0xFF;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005F 
; 0000 0060 DDRD = 0x01;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0061 PORTD = 0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0062 
; 0000 0063 // ADC initialization
; 0000 0064 // ADC Clock frequency: 1000.000 kHz
; 0000 0065 // ADC Voltage Reference: AVCC pin
; 0000 0066 // ADC Auto Trigger Source: Free Running
; 0000 0067 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0068 ADCSRA=0xA3;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0069 SFIOR&=0x1F;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006A 
; 0000 006B while (1)
;PCODE: $00000084 VOL: 0
; 0000 006C       {
; 0000 006D       hienthiled7(read_adc(0));
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006E       while ((ADCSRA & 0x10)==1)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 006F       {
; 0000 0070       hienthiled7(read_adc(0));
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0071       LED = 1;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0072       }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0073       LED = 0;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0074       }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0075 }
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
